# necessario per mappare le configuratione del servizio spring-boot-rest-jpa

apiVersion: v1
kind: ConfigMap
metadata:
  name: spring-boot-rest-jpa-config
data:
  URL_DATASOURCE: "jdbc:h2:mem:testdb"
  PING_SERVICE: "http://ping-service:8090"


---
# necessario per mappare le proprietà sensibili del servizio spring-boot-rest-jpa
# "username" base64 encoded  echo -n 'sa' | base64 dove 'sa' è il valore originale
apiVersion: v1
kind: Secret
metadata:
  name: spring-boot-rest-jpa-secret
type: Opaque
data:
  USERNAME: "c2E="


---

# deployment del servizio spring-boot-rest-jpa con riferimento a configMap e secret

apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-rest-jpa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-boot-rest-jpa
  template:
    metadata:
      labels:
        app: spring-boot-rest-jpa
    spec:
      serviceAccountName: spring-app-sa # Utilizzo del ServiceAccount per eccedere, il pod deve utilizzare il ServiceAccount con i permessi necessari per accedere alle risorse Kubernetes richieste per il service discovery e il load balancing.
      containers:
        - name: spring-boot-rest-jpa
          image: mircocennamo82/my-repo:spring-boot-rest-jpa
          ports:
            - containerPort: 8081
          envFrom:
            - configMapRef:
                name: spring-boot-rest-jpa-config
            - secretRef:
                name: spring-boot-rest-jpa-secret


---

# necessario per l bilanciamento del carico e per l'accesso al servizio all'interno del cluster

apiVersion: v1
kind: Service
metadata:
  name: spring-boot-rest-jpa
spec:
  selector:
    app: spring-boot-rest-jpa
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP

---
# necessario per accesso esterno al cluster spring-boot-rest-jpa.example.com è mappato nel file host

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-boot-rest-jpa-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: spring-boot-rest-jpa.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: spring-boot-rest-jpa
                port:
                  number: 8081

---

# service per accedere ai servizi presenti sulla macchina docker esterno al cluster k8s
apiVersion: v1
kind: Service
metadata:
  name: host-docker-service
spec:
  type: ExternalName
  externalName: host.docker.internal

